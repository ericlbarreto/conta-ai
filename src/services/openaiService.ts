import OpenAI from 'openai';
import { DocumentFile } from '@/types';

export class OpenAIService {
  private openai: OpenAI | null = null;
  private documents: DocumentFile[] = [];

  constructor(apiKey?: string) {
    if (apiKey) {
      this.openai = new OpenAI({
        apiKey,
        dangerouslyAllowBrowser: true
      });
    }
  }

  setApiKey(apiKey: string) {
    this.openai = new OpenAI({
      apiKey,
      dangerouslyAllowBrowser: true
    });
  }

  setDocuments(documents: DocumentFile[]) {
    this.documents = documents;
  }

  async processQuery(query: string): Promise<string> {
    if (!this.openai) {
      throw new Error('API key do OpenAI n√£o configurada');
    }

    if (this.documents.length === 0) {
      return this.getNoDocumentsResponse();
    }

    // Extract document content for context
    const documentContext = this.buildDocumentContext();
    
    try {
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4.1-2025-04-14",
        messages: [
          {
            role: "system",
            content: this.getSystemPrompt()
          },
          {
            role: "user",
            content: `Contexto dos documentos cont√°beis:\n${documentContext}\n\nPergunta do usu√°rio: ${query}`
          }
        ],
        temperature: 0.7,
        max_tokens: 1500
      });

      return completion.choices[0]?.message?.content || "Desculpe, n√£o consegui processar sua solicita√ß√£o.";
    } catch (error: any) {
      console.error('Erro na API OpenAI:', error);
      
      if (error.status === 401) {
        throw new Error('‚ùå **API Key inv√°lida**\n\nVerifique se sua chave da OpenAI est√° correta e ativa.');
      }
      
      if (error.status === 429) {
        throw new Error('‚ùå **Limite de uso atingido**\n\nVoc√™ atingiu o limite de requisi√ß√µes. Aguarde alguns minutos e tente novamente.');
      }
      
      throw new Error('‚ùå **Erro na comunica√ß√£o com a IA**\n\nVerifique sua conex√£o e tente novamente.');
    }
  }

  private getSystemPrompt(): string {
    return `Voc√™ √© um assistente cont√°bil especializado chamado ContaBot Pro. Suas responsabilidades:

REGRAS FUNDAMENTAIS:
- Responda APENAS com base nos documentos cont√°beis fornecidos no contexto
- NUNCA invente ou crie informa√ß√µes que n√£o est√£o nos documentos
- Se n√£o tiver a informa√ß√£o, diga claramente "‚ùå N√£o encontrei essa informa√ß√£o nos documentos enviados"
- Seja gentil, profissional e use emojis moderadamente
- Formate suas respostas em markdown para melhor legibilidade
- Foque em an√°lises cont√°beis: receitas, despesas, lucros, impostos, tend√™ncias

CAPACIDADES:
- Analisar receitas e despesas
- Calcular margens e lucros
- Identificar tend√™ncias financeiras
- Sugerir visualiza√ß√µes (gr√°ficos)
- Gerar resumos executivos
- Analisar tributos e impostos

FORMATO DAS RESPOSTAS:
- Use t√≠tulos com ## para se√ß√µes
- Use listas com ‚Ä¢ para pontos importantes
- Use **negrito** para destacar valores e m√©tricas
- Inclua emojis relevantes (üìä, üí∞, üìà, etc.)
- Seja conciso mas informativo

LIMITA√á√ïES:
- N√£o responda sobre assuntos n√£o relacionados √† contabilidade
- N√£o forne√ßa aconselhamento jur√≠dico ou fiscal espec√≠fico
- Sempre se baseie apenas nos dados fornecidos`;
  }

  private buildDocumentContext(): string {
    return this.documents.map(doc => {
      let context = `Documento: ${doc.name} (${doc.type})\n`;
      
      if (doc.content) {
        context += `Conte√∫do textual: ${doc.content}\n`;
      }
      
      if (doc.data) {
        context += `Dados estruturados: ${JSON.stringify(doc.data, null, 2)}\n`;
      }
      
      return context;
    }).join('\n---\n');
  }

  private getNoDocumentsResponse(): string {
    return `üìã **Ol√°! Sou o ContaBot Pro, seu assistente cont√°bil inteligente** üòä

Para come√ßarmos a an√°lise, preciso que voc√™ envie seus documentos cont√°beis (PDF, Excel ou CSV).

**Ap√≥s o upload, poderei ajud√°-lo com:**
‚Ä¢ üìä An√°lise detalhada de receitas e despesas
‚Ä¢ üí∞ C√°lculos de lucros e margens
‚Ä¢ üìà Sugest√µes de gr√°ficos e visualiza√ß√µes
‚Ä¢ üìã Resumos executivos personalizados
‚Ä¢ üîç Identifica√ß√£o de tend√™ncias financeiras
‚Ä¢ üèõÔ∏è An√°lise de impostos e tributos

**Envie seus documentos e fa√ßa perguntas como:**
‚Ä¢ "Qual foi o lucro l√≠quido em abril?"
‚Ä¢ "Gere um resumo das receitas do trimestre"
‚Ä¢ "Sugira gr√°ficos para visualizar os dados"
‚Ä¢ "Analise as tend√™ncias de despesas"

**Estou aqui para tornar sua an√°lise cont√°bil mais r√°pida e precisa!** ‚ú®`;
  }

  generateChartSuggestions(data: any) {
    // This method will be called to suggest charts based on real data
    if (!data) return [];
    
    const suggestions = [];
    
    // Extract time series data for line charts
    if (data.receitas && data.despesas) {
      suggestions.push({
        id: '1',
        type: 'line' as const,
        title: 'Evolu√ß√£o Receitas vs Despesas',
        description: 'Acompanhe a evolu√ß√£o temporal das receitas e despesas',
        data: data.receitas.map((r: any, i: number) => ({
          periodo: r.mes || r.periodo || `Per√≠odo ${i + 1}`,
          receitas: r.valor || r.receita || 0,
          despesas: data.despesas[i]?.valor || data.despesas[i]?.despesa || 0
        })),
        config: { xAxis: 'periodo', yAxis: 'valor' }
      });
    }

    // Bar chart for comparative analysis
    if (data.receitas) {
      suggestions.push({
        id: '2',
        type: 'bar' as const,
        title: 'Comparativo Mensal de Performance',
        description: 'Compare receitas, despesas e lucro por per√≠odo',
        data: data.receitas.map((r: any, i: number) => {
          const despesa = data.despesas?.[i]?.valor || 0;
          return {
            periodo: r.mes || r.periodo || `Per√≠odo ${i + 1}`,
            receitas: r.valor || 0,
            despesas: despesa,
            lucro: (r.valor || 0) - despesa
          };
        }),
        config: { xAxis: 'periodo' }
      });
    }

    return suggestions;
  }
}